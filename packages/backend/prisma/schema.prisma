generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                         @id @default(uuid())
  email                         String                         @unique
  phoneNumber                   String?                        @unique
  password                      String
  role                          UserRole
  isVerified                    Boolean                        @default(false)
  isActive                      Boolean                        @default(true)
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  aidRequests                   AidRequest[]
  donations                     Donation[]
  emergencyContacts             EmergencyContact[]
  emergencyServiceRequests      EmergencyServiceRequest[]
  governmentServiceAppointments GovernmentServiceAppointment[]
  notifications                 Notification[]
  profile                       UserProfile?
  volunteerTasks                VolunteerTask[]

  @@map("users")
}

model UserProfile {
  id               String    @id @default(uuid())
  userId           String    @unique
  firstName        String
  lastName         String
  avatar           String?
  dateOfBirth      DateTime?
  gender           String?
  address          String?
  city             String?
  state            String?
  country          String?
  zipCode          String?
  latitude         Float?
  longitude        Float?
  bloodType        String?
  allergies        String?
  medicalInfo      String?
  skills           String[]
  availability     String?
  organizationName String?
  organizationType String?
  taxId            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model EmergencyContact {
  id           String  @id @default(uuid())
  userId       String
  name         String
  relationship String
  phoneNumber  String
  email        String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

model AidRequest {
  id                       String               @id @default(uuid())
  userId                   String
  title                    String
  description              String
  category                 AidCategory
  priority                 Int                  @default(5)
  status                   RequestStatus        @default(PENDING)
  latitude                 Float
  longitude                Float
  address                  String?
  images                   String[]
  damageAssessment         Json?
  estimatedCost            Float?
  urgencyScore             Int?
  estimatedFulfillmentTime DateTime?
  actualFulfillmentTime    DateTime?
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  expiresAt                DateTime?
  user                     User                 @relation(fields: [userId], references: [id])
  resourceAllocations      ResourceAllocation[]
  volunteerTasks           VolunteerTask[]

  @@index([latitude, longitude])
  @@index([status, priority])
  @@index([category, status])
  @@map("aid_requests")
}

model Resource {
  id             String               @id @default(uuid())
  name           String
  description    String?
  category       AidCategory
  quantity       Int                  @default(0)
  unit           String
  status         ResourceStatus       @default(AVAILABLE)
  latitude       Float?
  longitude      Float?
  address        String?
  expiryDate     DateTime?
  estimatedValue Float?
  donorId        String?
  organizationId String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  allocations    ResourceAllocation[]

  @@index([category, status])
  @@index([latitude, longitude])
  @@map("resources")
}

model ResourceAllocation {
  id                String         @id @default(uuid())
  resourceId        String
  aidRequestId      String
  quantityAllocated Int
  status            ResourceStatus @default(ALLOCATED)
  allocatedAt       DateTime       @default(now())
  deliveredAt       DateTime?
  aidRequest        AidRequest     @relation(fields: [aidRequestId], references: [id])
  resource          Resource       @relation(fields: [resourceId], references: [id])

  @@map("resource_allocations")
}

model VolunteerTask {
  id                String     @id @default(uuid())
  aidRequestId      String
  volunteerId       String
  title             String
  description       String
  status            TaskStatus @default(ASSIGNED)
  latitude          Float?
  longitude         Float?
  estimatedDuration Int?
  actualDuration    Int?
  assignedAt        DateTime   @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  completionPhotos  String[]
  completionNotes   String?
  aidRequest        AidRequest @relation(fields: [aidRequestId], references: [id])
  volunteer         User       @relation(fields: [volunteerId], references: [id])

  @@index([volunteerId, status])
  @@map("volunteer_tasks")
}

model Donation {
  id              String   @id @default(uuid())
  donorId         String
  amount          Float
  currency        String   @default("USD")
  allocation      Json?
  impactMetrics   Json?
  paymentMethod   String?
  transactionId   String?
  receiptUrl      String?
  isRecurring     Boolean  @default(false)
  recurringPeriod String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  donor           User     @relation(fields: [donorId], references: [id])

  @@map("donations")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  readAt    DateTime?
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@map("notifications")
}

model AnalyticsEvent {
  id        String   @id @default(uuid())
  eventType String
  userId    String?
  data      Json
  timestamp DateTime @default(now())

  @@index([eventType, timestamp])
  @@map("analytics_events")
}

model GovernmentService {
  id                    String                         @id @default(uuid())
  name                  String
  description           String
  category              GovernmentServiceCategory
  department            String
  isActive              Boolean                        @default(true)
  requiresDocuments     Boolean                        @default(true)
  avgProcessingTime     Int
  cost                  Float?                         @default(0)
  allowsOnlineBooking   Boolean                        @default(true)
  maxAdvanceBookingDays Int                            @default(30)
  slotDuration          Int                            @default(30)
  bufferTime            Int                            @default(5)
  maxDailySlots         Int                            @default(50)
  requiredDocuments     String[]
  eligibilityCriteria   String?
  officeLocation        String
  contactInfo           Json
  createdAt             DateTime                       @default(now())
  updatedAt             DateTime                       @updatedAt
  appointments          GovernmentServiceAppointment[]
  timeSlots             GovernmentServiceTimeSlot[]

  @@index([category, isActive])
  @@index([department])
  @@map("government_services")
}

model GovernmentServiceTimeSlot {
  id              String            @id @default(uuid())
  serviceId       String
  dayOfWeek       Int
  startTime       String
  endTime         String
  isActive        Boolean           @default(true)
  maxAppointments Int               @default(10)
  specialDates    Json?
  service         GovernmentService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, dayOfWeek])
  @@map("government_service_time_slots")
}

model GovernmentServiceAppointment {
  id                 String                     @id @default(uuid())
  serviceId          String
  userId             String
  appointmentDate    DateTime
  timeSlot           String
  duration           Int                        @default(30)
  status             AppointmentStatus          @default(SCHEDULED)
  priority           AppointmentPriority        @default(NORMAL)
  bookedAt           DateTime                   @default(now())
  bookingReference   String                     @unique
  queuePosition      Int?
  estimatedWaitTime  Int?
  documentsSubmitted Json?
  verificationStatus DocumentVerificationStatus @default(PENDING)
  remindersSent      Int                        @default(0)
  lastReminderAt     DateTime?
  serviceCompletedAt DateTime?
  feedback           Json?
  rating             Int?
  notes              String?
  adminNotes         String?
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  service            GovernmentService          @relation(fields: [serviceId], references: [id])
  user               User                       @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([serviceId, appointmentDate])
  @@index([bookingReference])
  @@index([appointmentDate, status])
  @@map("government_service_appointments")
}

model GovernmentServiceQueue {
  id                String        @id @default(uuid())
  serviceId         String
  userId            String
  position          Int
  estimatedWaitTime Int
  status            QueueStatus   @default(WAITING)
  priority          QueuePriority @default(NORMAL)
  joinedAt          DateTime      @default(now())
  notifiedAt        DateTime?
  servedAt          DateTime?
  leftQueueAt       DateTime?
  reason            String?
  notes             String?

  @@index([serviceId, position])
  @@index([userId, status])
  @@map("government_service_queue")
}

model GovernmentOffice {
  id                String   @id @default(uuid())
  name              String
  code              String   @unique
  address           String
  latitude          Float
  longitude         Float
  phone             String?
  email             String?
  website           String?
  operatingHours    Json
  holidays          Json
  dailyCapacity     Int      @default(100)
  staffCount        Int      @default(5)
  servicesOffered   String[]
  isActive          Boolean  @default(true)
  temporarilyClosed Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([latitude, longitude])
  @@map("government_offices")
}

model EmergencyServiceRequest {
  id               String                 @id @default(uuid())
  userId           String
  serviceType      EmergencyServiceType
  urgencyLevel     UrgencyLevel           @default(HIGH)
  description      String
  peopleAffected   Int?
  latitude         Float
  longitude        Float
  address          String
  status           EmergencyRequestStatus @default(SUBMITTED)
  assignedOfficer  String?
  responseTime     Int?
  photos           String[]
  documents        String[]
  submittedAt      DateTime               @default(now())
  acknowledgedAt   DateTime?
  respondedAt      DateTime?
  resolvedAt       DateTime?
  followUpRequired Boolean                @default(false)
  followUpNotes    String?
  user             User                   @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([urgencyLevel, status])
  @@index([latitude, longitude])
  @@map("emergency_service_requests")
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  timestamp  DateTime @default(now())
  ipAddress  String?
  userAgent  String?

  @@index([userId, timestamp])
  @@index([resource, resourceId])
  @@map("audit_logs")
}

enum UserRole {
  VICTIM
  DONOR
  VOLUNTEER
  ORGANIZATION
  ADMIN
}

enum AidCategory {
  MEDICAL
  FOOD
  WATER
  SHELTER
  CLOTHING
  TRANSPORTATION
  COMMUNICATION
  RESCUE
  EVACUATION
  OTHER
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  FULFILLED
  CANCELLED
  EXPIRED
}

enum VolunteerStatus {
  AVAILABLE
  BUSY
  OFFLINE
}

enum TaskStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  INFO
  WARNING
  EMERGENCY
  SUCCESS
}

enum ResourceStatus {
  AVAILABLE
  ALLOCATED
  IN_TRANSIT
  DELIVERED
  EXPIRED
}

enum GovernmentServiceCategory {
  HEALTHCARE
  EDUCATION
  SOCIAL_WELFARE
  HOUSING
  EMPLOYMENT
  DOCUMENTATION
  LICENSING
  PERMITS
  EMERGENCY_SERVICES
  UTILITIES
  TRANSPORTATION
  LEGAL_AID
  INSURANCE
  DISABILITY_SERVICES
  ELDERLY_CARE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum AppointmentPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  EMERGENCY
}

enum DocumentVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  INCOMPLETE
}

enum QueueStatus {
  WAITING
  CALLED
  BEING_SERVED
  COMPLETED
  LEFT_QUEUE
  NO_SHOW
}

enum QueuePriority {
  LOW
  NORMAL
  HIGH
  URGENT
  EMERGENCY
  DISABLED
  ELDERLY
  PREGNANT
}

enum EmergencyServiceType {
  MEDICAL_EMERGENCY
  FIRE
  POLICE
  DISASTER_RELIEF
  SEARCH_RESCUE
  EVACUATION
  SHELTER
  FOOD_DISTRIBUTION
  WATER_SUPPLY
  POWER_RESTORATION
  COMMUNICATION
  TRANSPORTATION
  OTHER
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  LIFE_THREATENING
}

enum EmergencyRequestStatus {
  SUBMITTED
  ACKNOWLEDGED
  ASSIGNED
  IN_PROGRESS
  RESPONDED
  RESOLVED
  CLOSED
  ESCALATED
}
